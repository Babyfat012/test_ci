name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, kiet ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '16.x'
  MONGO_URL: mongodb://localhost:27017/Clothes_Test

jobs:
  # ============= SERVER TESTS =============
  server-tests:
    name: Server Unit & Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:5
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: server_app/package-lock.json

      - name: Install server dependencies
        working-directory: ./server_app
        run: npm ci

      - name: Run server unit tests
        working-directory: ./server_app
        run: npm run test:unit
        env:
          MONGO_URL: ${{ env.MONGO_URL }}
          JWT_SECRET: test_secret_key_for_ci
          NODE_ENV: test

      - name: Run server integration tests
        working-directory: ./server_app
        run: npm run test:integration
        env:
          MONGO_URL: ${{ env.MONGO_URL }}
          JWT_SECRET: test_secret_key_for_ci
          NODE_ENV: test

      - name: Generate server coverage report
        working-directory: ./server_app
        run: npm run test:coverage

      - name: Upload server coverage
        uses: codecov/codecov-action@v3
        with:
          flags: server
          directory: ./server_app/coverage

  # ============= CLIENT TESTS =============
  client-tests:
    name: Client Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: client_app/package-lock.json

      - name: Install client dependencies
        working-directory: ./client_app
        run: npm ci

      - name: Run client tests
        working-directory: ./client_app
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true
          REACT_APP_API_URL: http://localhost:8000/

      - name: Upload client coverage
        uses: codecov/codecov-action@v3
        with:
          flags: client
          directory: ./client_app/coverage

  # ============= ADMIN TESTS =============
  admin-tests:
    name: Admin Unit & Integration Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: admin_app/package-lock.json

      - name: Install admin dependencies
        working-directory: ./admin_app
        run: npm ci

      - name: Run admin tests
        working-directory: ./admin_app
        run: npm test -- --coverage --watchAll=false
        env:
          CI: true
          REACT_APP_API_URL: http://localhost:8000/

      - name: Upload admin coverage
        uses: codecov/codecov-action@v3
        with:
          flags: admin
          directory: ./admin_app/coverage

  # ============= LINTING & CODE QUALITY =============
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Lint server code
        working-directory: ./server_app
        run: |
          npm ci
          npm run lint || true

      - name: Lint client code
        working-directory: ./client_app
        run: |
          npm ci
          npm run lint || true

      - name: Lint admin code
        working-directory: ./admin_app
        run: |
          npm ci
          npm run lint || true

  # ============= E2E TESTS =============
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [server-tests, client-tests, admin-tests]

    services:
      mongodb:
        image: mongo:5
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install all dependencies
        run: |
          cd server_app && npm ci && cd ..
          cd client_app && npm ci && cd ..
          cd admin_app && npm ci && cd ..

      - name: Start services
        run: |
          cd server_app
          npm start &
          SERVER_PID=$!
          sleep 10
          cd ../client_app
          npm start &
          CLIENT_PID=$!
          sleep 15
          echo "SERVER_PID=$SERVER_PID" >> $GITHUB_ENV
          echo "CLIENT_PID=$CLIENT_PID" >> $GITHUB_ENV
        env:
          MONGO_URL: mongodb://localhost:27017/Clothes_Test
          JWT_SECRET: test_secret_key_for_ci

      - name: Run E2E tests
        working-directory: ./client_app
        run: npm run test:e2e || true

      - name: Stop services
        if: always()
        run: |
          kill ${{ env.SERVER_PID }} || true
          kill ${{ env.CLIENT_PID }} || true

  # ============= BUILD & DOCKER =============
  build:
    name: Build & Docker Images
    runs-on: ubuntu-latest
    needs: [server-tests, client-tests, admin-tests, lint]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for server
        id: meta-server
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/sgu-server
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push server image
        uses: docker/build-push-action@v4
        with:
          context: ./server_app
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-server.outputs.tags }}
          labels: ${{ steps.meta-server.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for client
        id: meta-client
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/sgu-client
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push client image
        uses: docker/build-push-action@v4
        with:
          context: ./client_app
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-client.outputs.tags }}
          labels: ${{ steps.meta-client.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for admin
        id: meta-admin
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository_owner }}/sgu-admin
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push admin image
        uses: docker/build-push-action@v4
        with:
          context: ./admin_app
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta-admin.outputs.tags }}
          labels: ${{ steps.meta-admin.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ============= DEPLOY =============
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to server
        run: |
          echo "Deployment step - configure based on your hosting provider"
          # Add your deployment commands here
          # Example: SSH to server and pull latest images
